#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>	
#include <locale.h>
#include <math.h>
#include <string.h>

struct elem
{
	char word[15];
	elem* next;
	elem* pred;
};

int main()
{
	setlocale(0, "russian");
	elem* first, * last, * q, * k, * t, * t_next = NULL, * k_next = NULL, * t_pred = NULL, * k_pred = NULL;
	char st[80], s[15];
	int i, dls = 0, FL2 = 0, FL1 = 0;
	puts("Введите строку:");
	s[0] = '\0';
	gets_s(st);
	first = NULL;
	last = first;
	t = NULL;
	k = NULL;
	for (i = 0; i <= strlen(st); i++)
	{
		if (st[i] == ' ' || st[i] == '\0')
		{
			s[dls] = '\0';
			if (first == NULL)
			{
				first = new elem;
				strcpy(first->word, s);
				first->next = NULL;
				first->pred = NULL;
				last = first;
			}
			else
			{
				q = new elem;
				strcpy(q->word, s);
				q->pred = last;
				q->next = NULL;
				last->next = q;
				last = q;
			}
			dls = 0;
		}
		else s[dls++] = st[i];
	}
	q = first;
	puts("\nCписок, выведенный в прямом напрвлении:");
	while (q != NULL)
	{
		printf("%s\n", q->word);
		q = q->next;
	}
	q = last;
	puts("\nCписок, выведенный в обратном напрвлении:");
	while (q != NULL)
	{
		printf("%s\n", q->word);
		q = q->pred;
	}
	q = first;
	while (q != NULL)
	{
		if ((q->word[0] == 'k') && (FL1==0))
		{
			k = q;
			FL1 = 1;
		}
		else
		{
			if ((q->word[0] == 't') && (FL2 == 0))
			{
				t = q;
				FL2 = 1;
			}
		}
		q = q->next;
	} 
	t_pred = t->pred;
	t_next= t->next;
	k_next = k->next;
	k_pred = k->pred;
	if ((t_pred != NULL) && (t_next != NULL) && (k_next != NULL) && (k_pred != NULL) && (t_next!=k) && (k_next!=t))
	{
		t->next = k_next;
		k->next = t_next;
		t->pred = k_pred;
		k->pred = t_pred;
		k_next->pred = t;
		k_pred->next = t;
		t_pred->next = k;
		t_next->pred = k;
	}
	else
	{
		if (t_pred == NULL)
		{
			k_pred->next=t;
			k_next->pred = t;
			t->next = k_next;
			t->pred = k_pred;
			k->pred = NULL;
			k->next = t_next;
			t_next->pred = k;
			first = k;
		}
		else
		{
			if (k_pred == NULL)
			{
				t_pred->next = k;
				t_next->pred = k;
				k->next = t_next;
				k->pred = t_pred;
				t->pred = NULL;
				t->next = k_next;
				k_next->pred = t;
				first = t;
			}
			else
			{
				if (t_next == NULL)
				{
					t_pred->next = k;
					k->pred = t_pred;
					k->next = NULL;
					k_pred->next = t;
					k_next->pred = t;
					t->pred = k_pred;
					t->next = k_next;
					last = t;
				}
				else
				{
					if (t_next == NULL)
					{
						k_pred->next = t;
						t->pred = k_pred;
						t->next = NULL;
						t_pred->next = k;
						t_next->pred = k;
						k->pred = k_pred;
						k->next = t_next;
						last = k;
					}
					else
					{
						if (k_next == t)
						{
							t->pred = k_pred;
							k_pred->next = t;
							t->next = k;
							k->pred = t;
							k_next->pred = k;
							k->next = t_next;
						}
						else
						{
							if (t->next == k)
							{
								k->pred = t_pred;
								t_pred->next = k;
								k->next = t;
								t->pred = k;
								t_next->pred = t;
								t->next = k_next;
							}
						}
					}
				}
			}
		}
	}
	q = first;
	puts("\nCписок, выведенный в обратном напрвлении:");
	while (q != NULL)
	{
		printf("%s\n", q->word);
		q = q->next;
	}
	return 0;
}
