#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <locale.h>
#include <math.h>
#include <string.h>

struct elem
{
	char word[15];
	elem* next;
	elem* pred;
};

int main()
{
	setlocale(0, "russian");
	elem* first, * last, * q, * n, *p;
	char st[80], s[15];
	int i = 1, j;
	int fl = 0, dls = 0, k = 0;
	puts("Введите строку:");
	s[0] = '\0';
	gets_s(st);
	first = NULL;
	last = first;
	for (i=0; i<=strlen(st); i++)
	{
		if (st[i] == ' ' || st[i] == '\0')
		{
			s[dls] = '\0';
			if (first == NULL)
			{
				first = new elem;
				strcpy(first->word, s);
				first->next = NULL;
				first->pred = NULL;
				last = first;
			}
			else
			{
				q = new elem;
				strcpy(q->word, s);
				j = 0;
				fl = 0;
				if (q->word[0] >= last->word[0])//сравниваем с последним элементом
				{
					while ((q->word[j] != '\0') && (last->word[j] != '\0') && (fl == 0))
					{
						if (q->word[j] > last->word[j])
						{
							q->pred = last;
							last->next = q;
							q->next = NULL;
							last = q;
							fl = 1;
						}
						else
							if (q->word[j] < last->word[j])
							{
								p = last->pred;
								if (p != NULL)
								{
									p = last->pred;
									q->next = last;
									last->pred = q;
									q->pred = p;
									p->next = q;
									fl = 1;
								}
								else
								{
									q->next = last;
									last->pred = q;
									q->pred = NULL;
									first = q;
									fl = 1;
								}
							}
						j++;
					}
				}
				if (j == dls && fl==0)
				{
					q->pred = last;
					last->next = q;
					q->next = NULL;
					last = q;
					fl = 1;
				}
				if (fl == 0)//сравниваем с 1 элементом, если не вставили рядом с последним
				{
					j = 0;
					if (q->word[0] <= first->word[0])
					{
						while ((q->word[j] != '\0')  && (first->word[j] != '\0') && (fl == 0))
						{
							if (q->word[j] < first->word[j])
							{
								q->next = first;
								first->pred = q;
								q->pred = NULL;
								first = q;
								fl = 1;
							}
							else
								if (q->word[j] > first->word[j])
								{
									p = first->next;
									if (p != NULL)
									{
										q->next = p;
										p->pred = q;
										q->pred = first;
										first->next = q;
										fl = 1;
									}
									else
									{
										first->next = q;
										q->pred = first;
										q->next = NULL;
										last = q;
										fl = 1;
									}
								}
							j++;
						}
					}
					if (j == dls && fl==0)
					{
						p = first->next;
						q->pred = first;
						first->next = q;
						q->next = p;
						p->pred = q;
						fl = 1;
					}
				}
				if (fl == 0)//сравниваем с элементами посередине, если не вставили рядом с последним или рядом с первым
				{
					j = 0;
					n = first->next;
					while (n != NULL && fl == 0)
					{
						if (q->word[0] <= n->word[0])
						{
							while ((q->word[j] != '\0') && (n->word[j] != '\0') && (fl == 0))
							{
								if (q->word[j] < n->word[j])
								{
									p = n->pred;
									q->next = n;
									n->pred = q;
									q->pred = p;
									p->next = q;
									fl = 1;
								}
								j++;
							}
						}
						if (j == dls && fl == 0)//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
						{
							p = n->next;
							q->pred = n;
							n->next = q;
							q->next = p;
							p->pred = q;
							fl = 1;
						}
						n = n->next;
					}
				}
			}
			dls = 0;
		}
		else s[dls++] = st[i];
	}
	q = first;
	puts("\nCписок, осортированный по алфавиту, выведенный в прямом напрвлении:");
	while (q != NULL)
	{
		printf("%s\n", q->word);
		q = q->next;
	}
	q = last;
	puts("\nCписок, осортированный по алфавиту, выведенный в обратном напрвлении:");
	while (q != NULL)
	{
		printf("%s\n", q->word);
		q = q->pred;
	}
	puts("\nCлова в списке, длина которых меньше 5:");
	q = first;
	while (q != NULL)
	{
		if (strlen(q->word) < 5)
		{
			puts(q->word);
			k++;
		}
		q = q->next;
	}
	puts("\nКоличество слов в списке, длина которых меньше 5:");
	printf("%d\n\n", k);
	return 0;
}
